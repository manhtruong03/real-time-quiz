// src/lib/types/api.ts (or separate files like quiz.ts, common.ts)

// --- Base Page Structure ---
// Based on components.schemas.Page in openapi.json
export interface SortObject {
  direction?: string;
  nullHandling?: string;
  ascending?: boolean;
  property?: string;
  ignoreCase?: boolean;
}

export interface PageableObject {
  offset?: number;
  sort?: SortObject[];
  paged?: boolean;
  pageNumber?: number;
  pageSize?: number;
  unpaged?: boolean;
}

export interface Page<T> {
  totalPages: number;
  totalElements: number;
  size: number;
  content: T[];
  number: number; // Current page number (0-based)
  sort?: SortObject[];
  first: boolean;
  last: boolean;
  numberOfElements: number;
  pageable?: PageableObject; // Adjust based on actual backend response if needed
  empty: boolean;
}

// --- Image/Video Details ---
// Based on components.schemas.ImageDetailDTO
export interface ImageDetailDTO {
  url: string; // file_path
  altText?: string;
  contentType?: string;
}

// Based on components.schemas.VideoDetailDTO
export interface VideoDetailDTO {
  id?: string;
  startTime?: number;
  endTime?: number;
  service?: string;
  fullUrl?: string;
}

// --- Quiz Structure DTOs ---
// Based on components.schemas.ChoiceDTO
export interface ChoiceDTO {
  answer?: string;
  image?: ImageDetailDTO;
  correct: boolean;
}

// Based on components.schemas.QuestionDTO
export interface QuestionDTO {
  id?: string; // uuid, generated by backend
  type: "content" | "quiz" | "jumble" | "survey" | "open_ended";
  title: string; // Question text or content title
  description?: string; // For content slides
  time?: number; // ms
  pointsMultiplier?: number;
  choices?: ChoiceDTO[]; // Not applicable for 'content'
  image?: string; // URL (file_path)
  video?: VideoDetailDTO;
  media?: string[]; // Array of URLs or structured objects (simple strings for now)
  position: number; // 0-based index
}

// Based on components.schemas.QuizDTO
export interface QuizDTO {
  visibility: number; // 0=private, 1=public
  title: string;
  description?: string;
  quizType?: string; // e.g., "quiz"
  questions: QuestionDTO[];
  questionCount?: number; // Populated by backend
  isValid?: boolean; // Populated by backend
  playAsGuest?: boolean;
  status?: string; // e.g., "DRAFT", "PUBLISHED"
  type?: string; // Redundant? Matches mock's 'type' field
  created?: number; // Unix millis, populated by backend
  modified?: number; // Unix millis, populated by backend
  tags?: string[];
  uuid?: string; // Generated by backend
  creator?: string; // User ID, set by backend
  creator_username?: string; // Populated by backend
  cover?: string; // URL (file_path)
  lobby_video?: {
    // Match VideoDetailDTO structure if possible
    youtube?: VideoDetailDTO; // Assuming structure matches VideoDetailDTO
  };
}

// --- Auth DTOs (already defined in src/lib/types/auth.ts, ensure they match openapi) ---
// Example: Ensure JwtResponse matches components.schemas.JwtResponse

// --- Common Message Response ---
// Based on components.schemas.MessageResponse
export interface MessageResponse {
  message: string;
}
