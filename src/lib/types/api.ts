// src/lib/types/api.ts
// Add or update the following interfaces based on openapi.json

// --- Base Page Structure ---
// Based on components.schemas.Page in openapi.json
export interface SortObject {
  direction?: string;
  nullHandling?: string;
  ascending?: boolean;
  property?: string;
  ignoreCase?: boolean;
}

export interface PageableObject {
  offset?: number;
  sort?: SortObject[];
  paged?: boolean;
  pageNumber?: number;
  pageSize?: number;
  unpaged?: boolean;
}

export interface Page<T> {
  totalPages: number;
  totalElements: number;
  size: number;
  content: T[];
  number: number; // Current page number (0-based)
  sort?: SortObject[];
  first: boolean;
  last: boolean;
  numberOfElements: number;
  pageable?: PageableObject;
  empty: boolean;
}

// --- Image/Video Details ---
// Based on components.schemas.ImageDetailDTO
export interface ImageDetailDTO {
  url: string; // file_path
  altText?: string;
  contentType?: string;
}

// Based on components.schemas.VideoDetailDTO
export interface VideoDetailDTO {
  id?: string;
  startTime?: number;
  endTime?: number;
  service?: string;
  fullUrl?: string;
}

// --- Quiz Structure DTOs ---
// Based on components.schemas.ChoiceDTO
export interface ChoiceDTO {
  answer?: string;
  image?: ImageDetailDTO;
  correct: boolean;
}

// Based on components.schemas.QuestionDTO
export interface QuestionDTO {
  id?: string; // uuid, generated by backend
  type: "content" | "quiz" | "jumble" | "survey" | "open_ended";
  title: string; // Question text or content title
  description?: string;
  time?: number; // ms
  pointsMultiplier?: number;
  choices?: ChoiceDTO[];
  image?: string | null; // URL (file_path) for the main question image
  video?: VideoDetailDTO | null;
  media?: string[]; // Array of URLs or structured objects (simple strings for now as per openapi)
  position: number; // 0-based index
  questionImageUploadKey?: string | null;
}

// Based on components.schemas.QuizDTO
export interface QuizDTO {
  uuid?: string; // Generated by backend for responses
  title: string;
  description?: string;
  visibility: number; // 0=private, 1=public
  status?: string; // e.g., "DRAFT", "PUBLISHED". Defaults to DRAFT if not sent.
  tags?: string[];
  cover?: string | null; // URL (file_path)
  coverImageUploadKey?: string | null;
  lobby_video?: {
    // Optional lobby video container
    youtube?: VideoDetailDTO; // Assuming structure matches VideoDetailDTO based on mock data
  } | null;
  questions: QuestionDTO[];
  totalQuizTimeLimitMs?: number;

  // Fields usually populated by backend for responses, but good to have for type consistency
  creator?: string; // User ID, set by backend
  creator_username?: string; // Populated by backend
  quizType?: string; // Optional field from mock data
  questionCount?: number; // Populated by backend
  isValid?: boolean; // Populated by backend
  playAsGuest?: boolean; // Optional field
  type?: string; // Optional: Redundant field from mock data? Matches 'quizType'
  created?: number; // Unix millis, populated by backend
  modified?: number; // Unix millis, populated by backend
}

// --- Auth DTOs (already defined in src/lib/types/auth.ts, ensure they match openapi) ---
// Example: Ensure JwtResponse matches components.schemas.JwtResponse

// --- Common Message Response ---
// Based on components.schemas.MessageResponse
export interface MessageResponse {
  message: string;
}

// You might already have this from authentication setup
export class AuthApiError extends Error {
  status: number;
  details?: any;

  constructor(message: string, status: number, details?: any) {
    super(message);
    this.name = "AuthApiError";
    this.status = status;
    this.details = details;
  }
}
